// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc_impl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IUserClient is the client API for IUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IUserClient interface {
	// functions
	Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginRes, error)
	Create(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*Err, error)
	List(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListRes, error)
	Lock(ctx context.Context, in *UserLockReq, opts ...grpc.CallOption) (*Err, error)
	Unlock(ctx context.Context, in *UserUnlockReq, opts ...grpc.CallOption) (*Err, error)
	ModifyInfo(ctx context.Context, in *UserModifyInfoReq, opts ...grpc.CallOption) (*Err, error)
	ModifyPermission(ctx context.Context, in *UserModifyPermissionReq, opts ...grpc.CallOption) (*Err, error)
	// for other services
	Authenticate(ctx context.Context, in *UserAuthenticateReq, opts ...grpc.CallOption) (*Err, error)
}

type iUserClient struct {
	cc grpc.ClientConnInterface
}

func NewIUserClient(cc grpc.ClientConnInterface) IUserClient {
	return &iUserClient{cc}
}

func (c *iUserClient) Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginRes, error) {
	out := new(UserLoginRes)
	err := c.cc.Invoke(ctx, "/user.IUser/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserClient) Create(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/user.IUser/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserClient) List(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListRes, error) {
	out := new(UserListRes)
	err := c.cc.Invoke(ctx, "/user.IUser/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserClient) Lock(ctx context.Context, in *UserLockReq, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/user.IUser/lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserClient) Unlock(ctx context.Context, in *UserUnlockReq, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/user.IUser/unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserClient) ModifyInfo(ctx context.Context, in *UserModifyInfoReq, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/user.IUser/modifyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserClient) ModifyPermission(ctx context.Context, in *UserModifyPermissionReq, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/user.IUser/modifyPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserClient) Authenticate(ctx context.Context, in *UserAuthenticateReq, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/user.IUser/authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IUserServer is the server API for IUser service.
// All implementations must embed UnimplementedIUserServer
// for forward compatibility
type IUserServer interface {
	// functions
	Login(context.Context, *UserLoginReq) (*UserLoginRes, error)
	Create(context.Context, *UserCreateReq) (*Err, error)
	List(context.Context, *UserListReq) (*UserListRes, error)
	Lock(context.Context, *UserLockReq) (*Err, error)
	Unlock(context.Context, *UserUnlockReq) (*Err, error)
	ModifyInfo(context.Context, *UserModifyInfoReq) (*Err, error)
	ModifyPermission(context.Context, *UserModifyPermissionReq) (*Err, error)
	// for other services
	Authenticate(context.Context, *UserAuthenticateReq) (*Err, error)
	mustEmbedUnimplementedIUserServer()
}

// UnimplementedIUserServer must be embedded to have forward compatible implementations.
type UnimplementedIUserServer struct {
}

func (UnimplementedIUserServer) Login(context.Context, *UserLoginReq) (*UserLoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedIUserServer) Create(context.Context, *UserCreateReq) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIUserServer) List(context.Context, *UserListReq) (*UserListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIUserServer) Lock(context.Context, *UserLockReq) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedIUserServer) Unlock(context.Context, *UserUnlockReq) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedIUserServer) ModifyInfo(context.Context, *UserModifyInfoReq) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyInfo not implemented")
}
func (UnimplementedIUserServer) ModifyPermission(context.Context, *UserModifyPermissionReq) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPermission not implemented")
}
func (UnimplementedIUserServer) Authenticate(context.Context, *UserAuthenticateReq) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedIUserServer) mustEmbedUnimplementedIUserServer() {}

// UnsafeIUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IUserServer will
// result in compilation errors.
type UnsafeIUserServer interface {
	mustEmbedUnimplementedIUserServer()
}

func RegisterIUserServer(s grpc.ServiceRegistrar, srv IUserServer) {
	s.RegisterService(&IUser_ServiceDesc, srv)
}

func _IUser_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).Login(ctx, req.(*UserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IUser_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).Create(ctx, req.(*UserCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IUser_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/list",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).List(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IUser_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).Lock(ctx, req.(*UserLockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IUser_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUnlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).Unlock(ctx, req.(*UserUnlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IUser_ModifyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserModifyInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).ModifyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/modifyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).ModifyInfo(ctx, req.(*UserModifyInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IUser_ModifyPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserModifyPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).ModifyPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/modifyPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).ModifyPermission(ctx, req.(*UserModifyPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IUser_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthenticateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).Authenticate(ctx, req.(*UserAuthenticateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IUser_ServiceDesc is the grpc.ServiceDesc for IUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.IUser",
	HandlerType: (*IUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _IUser_Login_Handler,
		},
		{
			MethodName: "create",
			Handler:    _IUser_Create_Handler,
		},
		{
			MethodName: "list",
			Handler:    _IUser_List_Handler,
		},
		{
			MethodName: "lock",
			Handler:    _IUser_Lock_Handler,
		},
		{
			MethodName: "unlock",
			Handler:    _IUser_Unlock_Handler,
		},
		{
			MethodName: "modifyInfo",
			Handler:    _IUser_ModifyInfo_Handler,
		},
		{
			MethodName: "modifyPermission",
			Handler:    _IUser_ModifyPermission_Handler,
		},
		{
			MethodName: "authenticate",
			Handler:    _IUser_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
