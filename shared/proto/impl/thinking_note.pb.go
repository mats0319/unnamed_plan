// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: thinking_note.proto

package rpc_impl

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ThinkingNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ThinkingNote) Reset() {
	*x = ThinkingNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thinking_note_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThinkingNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThinkingNote) ProtoMessage() {}

func (x *ThinkingNote) ProtoReflect() protoreflect.Message {
	mi := &file_thinking_note_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThinkingNote.ProtoReflect.Descriptor instead.
func (*ThinkingNote) Descriptor() ([]byte, []int) {
	return file_thinking_note_proto_rawDescGZIP(), []int{0}
}

type ThinkingNoteListByWriterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string      `protobuf:"bytes,1,opt,name=operatorID,proto3" json:"operatorID,omitempty"`
	Page       *Pagination `protobuf:"bytes,15,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ThinkingNoteListByWriterReq) Reset() {
	*x = ThinkingNoteListByWriterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thinking_note_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThinkingNoteListByWriterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThinkingNoteListByWriterReq) ProtoMessage() {}

func (x *ThinkingNoteListByWriterReq) ProtoReflect() protoreflect.Message {
	mi := &file_thinking_note_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThinkingNoteListByWriterReq.ProtoReflect.Descriptor instead.
func (*ThinkingNoteListByWriterReq) Descriptor() ([]byte, []int) {
	return file_thinking_note_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ThinkingNoteListByWriterReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *ThinkingNoteListByWriterReq) GetPage() *Pagination {
	if x != nil {
		return x.Page
	}
	return nil
}

type ThinkingNoteListByWriterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Notes []*ThinkingNoteNoteRes `protobuf:"bytes,2,rep,name=notes,proto3" json:"notes,omitempty"`
	Err   *Err                   `protobuf:"bytes,15,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ThinkingNoteListByWriterRes) Reset() {
	*x = ThinkingNoteListByWriterRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thinking_note_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThinkingNoteListByWriterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThinkingNoteListByWriterRes) ProtoMessage() {}

func (x *ThinkingNoteListByWriterRes) ProtoReflect() protoreflect.Message {
	mi := &file_thinking_note_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThinkingNoteListByWriterRes.ProtoReflect.Descriptor instead.
func (*ThinkingNoteListByWriterRes) Descriptor() ([]byte, []int) {
	return file_thinking_note_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ThinkingNoteListByWriterRes) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ThinkingNoteListByWriterRes) GetNotes() []*ThinkingNoteNoteRes {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *ThinkingNoteListByWriterRes) GetErr() *Err {
	if x != nil {
		return x.Err
	}
	return nil
}

type ThinkingNoteNoteRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteID      string `protobuf:"bytes,1,opt,name=noteID,proto3" json:"noteID,omitempty"`
	WriteBy     string `protobuf:"bytes,2,opt,name=writeBy,proto3" json:"writeBy,omitempty"`
	Topic       string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Content     string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	IsPublic    bool   `protobuf:"varint,5,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	UpdateTime  int64  `protobuf:"varint,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	CreatedTime int64  `protobuf:"varint,7,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
}

func (x *ThinkingNoteNoteRes) Reset() {
	*x = ThinkingNoteNoteRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thinking_note_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThinkingNoteNoteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThinkingNoteNoteRes) ProtoMessage() {}

func (x *ThinkingNoteNoteRes) ProtoReflect() protoreflect.Message {
	mi := &file_thinking_note_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThinkingNoteNoteRes.ProtoReflect.Descriptor instead.
func (*ThinkingNoteNoteRes) Descriptor() ([]byte, []int) {
	return file_thinking_note_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ThinkingNoteNoteRes) GetNoteID() string {
	if x != nil {
		return x.NoteID
	}
	return ""
}

func (x *ThinkingNoteNoteRes) GetWriteBy() string {
	if x != nil {
		return x.WriteBy
	}
	return ""
}

func (x *ThinkingNoteNoteRes) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ThinkingNoteNoteRes) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ThinkingNoteNoteRes) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *ThinkingNoteNoteRes) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *ThinkingNoteNoteRes) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type ThinkingNoteListPublicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string      `protobuf:"bytes,1,opt,name=operatorID,proto3" json:"operatorID,omitempty"`
	Page       *Pagination `protobuf:"bytes,15,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ThinkingNoteListPublicReq) Reset() {
	*x = ThinkingNoteListPublicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thinking_note_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThinkingNoteListPublicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThinkingNoteListPublicReq) ProtoMessage() {}

func (x *ThinkingNoteListPublicReq) ProtoReflect() protoreflect.Message {
	mi := &file_thinking_note_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThinkingNoteListPublicReq.ProtoReflect.Descriptor instead.
func (*ThinkingNoteListPublicReq) Descriptor() ([]byte, []int) {
	return file_thinking_note_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ThinkingNoteListPublicReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *ThinkingNoteListPublicReq) GetPage() *Pagination {
	if x != nil {
		return x.Page
	}
	return nil
}

type ThinkingNoteListPublicRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Notes []*ThinkingNoteNoteRes `protobuf:"bytes,2,rep,name=notes,proto3" json:"notes,omitempty"`
	Err   *Err                   `protobuf:"bytes,15,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ThinkingNoteListPublicRes) Reset() {
	*x = ThinkingNoteListPublicRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thinking_note_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThinkingNoteListPublicRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThinkingNoteListPublicRes) ProtoMessage() {}

func (x *ThinkingNoteListPublicRes) ProtoReflect() protoreflect.Message {
	mi := &file_thinking_note_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThinkingNoteListPublicRes.ProtoReflect.Descriptor instead.
func (*ThinkingNoteListPublicRes) Descriptor() ([]byte, []int) {
	return file_thinking_note_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ThinkingNoteListPublicRes) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ThinkingNoteListPublicRes) GetNotes() []*ThinkingNoteNoteRes {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *ThinkingNoteListPublicRes) GetErr() *Err {
	if x != nil {
		return x.Err
	}
	return nil
}

type ThinkingNoteCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string `protobuf:"bytes,1,opt,name=operatorID,proto3" json:"operatorID,omitempty"`
	Topic      string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Content    string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	IsPublic   bool   `protobuf:"varint,4,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
}

func (x *ThinkingNoteCreateReq) Reset() {
	*x = ThinkingNoteCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thinking_note_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThinkingNoteCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThinkingNoteCreateReq) ProtoMessage() {}

func (x *ThinkingNoteCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_thinking_note_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThinkingNoteCreateReq.ProtoReflect.Descriptor instead.
func (*ThinkingNoteCreateReq) Descriptor() ([]byte, []int) {
	return file_thinking_note_proto_rawDescGZIP(), []int{0, 5}
}

func (x *ThinkingNoteCreateReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *ThinkingNoteCreateReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ThinkingNoteCreateReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ThinkingNoteCreateReq) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type ThinkingNoteModifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string `protobuf:"bytes,1,opt,name=operatorID,proto3" json:"operatorID,omitempty"`
	NoteID     string `protobuf:"bytes,2,opt,name=noteID,proto3" json:"noteID,omitempty"`
	Password   string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Topic      string `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	Content    string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	IsPublic   bool   `protobuf:"varint,6,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
}

func (x *ThinkingNoteModifyReq) Reset() {
	*x = ThinkingNoteModifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thinking_note_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThinkingNoteModifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThinkingNoteModifyReq) ProtoMessage() {}

func (x *ThinkingNoteModifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_thinking_note_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThinkingNoteModifyReq.ProtoReflect.Descriptor instead.
func (*ThinkingNoteModifyReq) Descriptor() ([]byte, []int) {
	return file_thinking_note_proto_rawDescGZIP(), []int{0, 6}
}

func (x *ThinkingNoteModifyReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *ThinkingNoteModifyReq) GetNoteID() string {
	if x != nil {
		return x.NoteID
	}
	return ""
}

func (x *ThinkingNoteModifyReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ThinkingNoteModifyReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ThinkingNoteModifyReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ThinkingNoteModifyReq) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type ThinkingNoteDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string `protobuf:"bytes,1,opt,name=operatorID,proto3" json:"operatorID,omitempty"`
	Password   string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	NoteID     string `protobuf:"bytes,3,opt,name=noteID,proto3" json:"noteID,omitempty"`
}

func (x *ThinkingNoteDeleteReq) Reset() {
	*x = ThinkingNoteDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thinking_note_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThinkingNoteDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThinkingNoteDeleteReq) ProtoMessage() {}

func (x *ThinkingNoteDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_thinking_note_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThinkingNoteDeleteReq.ProtoReflect.Descriptor instead.
func (*ThinkingNoteDeleteReq) Descriptor() ([]byte, []int) {
	return file_thinking_note_proto_rawDescGZIP(), []int{0, 7}
}

func (x *ThinkingNoteDeleteReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *ThinkingNoteDeleteReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ThinkingNoteDeleteReq) GetNoteID() string {
	if x != nil {
		return x.NoteID
	}
	return ""
}

var File_thinking_note_proto protoreflect.FileDescriptor

var file_thinking_note_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x74, 0x65, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x99, 0x08, 0x0a, 0x0c, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x74, 0x65, 0x1a, 0x59, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x1a, 0x80, 0x01,
	0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x74, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x72, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x1a, 0xc9, 0x01, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x74, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x57, 0x0a, 0x0d,
	0x6c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x1a, 0x7e, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x68,
	0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x68, 0x69, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x72, 0x72,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x1a, 0x77, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x1a, 0xab,
	0x01, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x74, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x1a, 0x5f, 0x0a, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x32, 0x90, 0x03,
	0x0a, 0x0d, 0x49, 0x54, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x12,
	0x66, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12,
	0x2a, 0x2e, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x2e, 0x6c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x74, 0x68,
	0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x68, 0x69, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x28, 0x2e, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74,
	0x65, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x2e, 0x6c, 0x69, 0x73, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x74, 0x65, 0x2e, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x2e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x65, 0x72, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x12, 0x24, 0x2e, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x2e,
	0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x65, 0x72, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x24, 0x2e,
	0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x68, 0x69,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x72, 0x72,
	0x42, 0x0e, 0x48, 0x03, 0x5a, 0x0a, 0x2e, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_thinking_note_proto_rawDescOnce sync.Once
	file_thinking_note_proto_rawDescData = file_thinking_note_proto_rawDesc
)

func file_thinking_note_proto_rawDescGZIP() []byte {
	file_thinking_note_proto_rawDescOnce.Do(func() {
		file_thinking_note_proto_rawDescData = protoimpl.X.CompressGZIP(file_thinking_note_proto_rawDescData)
	})
	return file_thinking_note_proto_rawDescData
}

var file_thinking_note_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_thinking_note_proto_goTypes = []interface{}{
	(*ThinkingNote)(nil),                // 0: thinkingNote.thinkingNote
	(*ThinkingNoteListByWriterReq)(nil), // 1: thinkingNote.thinkingNote.listByWriterReq
	(*ThinkingNoteListByWriterRes)(nil), // 2: thinkingNote.thinkingNote.listByWriterRes
	(*ThinkingNoteNoteRes)(nil),         // 3: thinkingNote.thinkingNote.noteRes
	(*ThinkingNoteListPublicReq)(nil),   // 4: thinkingNote.thinkingNote.listPublicReq
	(*ThinkingNoteListPublicRes)(nil),   // 5: thinkingNote.thinkingNote.listPublicRes
	(*ThinkingNoteCreateReq)(nil),       // 6: thinkingNote.thinkingNote.createReq
	(*ThinkingNoteModifyReq)(nil),       // 7: thinkingNote.thinkingNote.modifyReq
	(*ThinkingNoteDeleteReq)(nil),       // 8: thinkingNote.thinkingNote.deleteReq
	(*Pagination)(nil),                  // 9: common.pagination
	(*Err)(nil),                         // 10: common.err
}
var file_thinking_note_proto_depIdxs = []int32{
	9,  // 0: thinkingNote.thinkingNote.listByWriterReq.page:type_name -> common.pagination
	3,  // 1: thinkingNote.thinkingNote.listByWriterRes.notes:type_name -> thinkingNote.thinkingNote.noteRes
	10, // 2: thinkingNote.thinkingNote.listByWriterRes.err:type_name -> common.err
	9,  // 3: thinkingNote.thinkingNote.listPublicReq.page:type_name -> common.pagination
	3,  // 4: thinkingNote.thinkingNote.listPublicRes.notes:type_name -> thinkingNote.thinkingNote.noteRes
	10, // 5: thinkingNote.thinkingNote.listPublicRes.err:type_name -> common.err
	1,  // 6: thinkingNote.IThinkingNote.listByWriter:input_type -> thinkingNote.thinkingNote.listByWriterReq
	4,  // 7: thinkingNote.IThinkingNote.listPublic:input_type -> thinkingNote.thinkingNote.listPublicReq
	6,  // 8: thinkingNote.IThinkingNote.create:input_type -> thinkingNote.thinkingNote.createReq
	7,  // 9: thinkingNote.IThinkingNote.modify:input_type -> thinkingNote.thinkingNote.modifyReq
	8,  // 10: thinkingNote.IThinkingNote.delete:input_type -> thinkingNote.thinkingNote.deleteReq
	2,  // 11: thinkingNote.IThinkingNote.listByWriter:output_type -> thinkingNote.thinkingNote.listByWriterRes
	5,  // 12: thinkingNote.IThinkingNote.listPublic:output_type -> thinkingNote.thinkingNote.listPublicRes
	10, // 13: thinkingNote.IThinkingNote.create:output_type -> common.err
	10, // 14: thinkingNote.IThinkingNote.modify:output_type -> common.err
	10, // 15: thinkingNote.IThinkingNote.delete:output_type -> common.err
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_thinking_note_proto_init() }
func file_thinking_note_proto_init() {
	if File_thinking_note_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_thinking_note_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThinkingNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thinking_note_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThinkingNoteListByWriterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thinking_note_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThinkingNoteListByWriterRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thinking_note_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThinkingNoteNoteRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thinking_note_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThinkingNoteListPublicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thinking_note_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThinkingNoteListPublicRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thinking_note_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThinkingNoteCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thinking_note_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThinkingNoteModifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thinking_note_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThinkingNoteDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_thinking_note_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_thinking_note_proto_goTypes,
		DependencyIndexes: file_thinking_note_proto_depIdxs,
		MessageInfos:      file_thinking_note_proto_msgTypes,
	}.Build()
	File_thinking_note_proto = out.File
	file_thinking_note_proto_rawDesc = nil
	file_thinking_note_proto_goTypes = nil
	file_thinking_note_proto_depIdxs = nil
}
