// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc_impl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IThinkingNoteClient is the client API for IThinkingNote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IThinkingNoteClient interface {
	ListByWriter(ctx context.Context, in *ThinkingNoteListByWriterReq, opts ...grpc.CallOption) (*ThinkingNoteListByWriterRes, error)
	ListPublic(ctx context.Context, in *ThinkingNoteListPublicReq, opts ...grpc.CallOption) (*ThinkingNoteListPublicRes, error)
	Create(ctx context.Context, in *ThinkingNoteCreateReq, opts ...grpc.CallOption) (*Err, error)
	Modify(ctx context.Context, in *ThinkingNoteModifyReq, opts ...grpc.CallOption) (*Err, error)
	Delete(ctx context.Context, in *ThinkingNoteDeleteReq, opts ...grpc.CallOption) (*Err, error)
}

type iThinkingNoteClient struct {
	cc grpc.ClientConnInterface
}

func NewIThinkingNoteClient(cc grpc.ClientConnInterface) IThinkingNoteClient {
	return &iThinkingNoteClient{cc}
}

func (c *iThinkingNoteClient) ListByWriter(ctx context.Context, in *ThinkingNoteListByWriterReq, opts ...grpc.CallOption) (*ThinkingNoteListByWriterRes, error) {
	out := new(ThinkingNoteListByWriterRes)
	err := c.cc.Invoke(ctx, "/thinkingNote.IThinkingNote/listByWriter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iThinkingNoteClient) ListPublic(ctx context.Context, in *ThinkingNoteListPublicReq, opts ...grpc.CallOption) (*ThinkingNoteListPublicRes, error) {
	out := new(ThinkingNoteListPublicRes)
	err := c.cc.Invoke(ctx, "/thinkingNote.IThinkingNote/listPublic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iThinkingNoteClient) Create(ctx context.Context, in *ThinkingNoteCreateReq, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/thinkingNote.IThinkingNote/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iThinkingNoteClient) Modify(ctx context.Context, in *ThinkingNoteModifyReq, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/thinkingNote.IThinkingNote/modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iThinkingNoteClient) Delete(ctx context.Context, in *ThinkingNoteDeleteReq, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/thinkingNote.IThinkingNote/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IThinkingNoteServer is the server API for IThinkingNote service.
// All implementations must embed UnimplementedIThinkingNoteServer
// for forward compatibility
type IThinkingNoteServer interface {
	ListByWriter(context.Context, *ThinkingNoteListByWriterReq) (*ThinkingNoteListByWriterRes, error)
	ListPublic(context.Context, *ThinkingNoteListPublicReq) (*ThinkingNoteListPublicRes, error)
	Create(context.Context, *ThinkingNoteCreateReq) (*Err, error)
	Modify(context.Context, *ThinkingNoteModifyReq) (*Err, error)
	Delete(context.Context, *ThinkingNoteDeleteReq) (*Err, error)
	mustEmbedUnimplementedIThinkingNoteServer()
}

// UnimplementedIThinkingNoteServer must be embedded to have forward compatible implementations.
type UnimplementedIThinkingNoteServer struct {
}

func (UnimplementedIThinkingNoteServer) ListByWriter(context.Context, *ThinkingNoteListByWriterReq) (*ThinkingNoteListByWriterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByWriter not implemented")
}
func (UnimplementedIThinkingNoteServer) ListPublic(context.Context, *ThinkingNoteListPublicReq) (*ThinkingNoteListPublicRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublic not implemented")
}
func (UnimplementedIThinkingNoteServer) Create(context.Context, *ThinkingNoteCreateReq) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIThinkingNoteServer) Modify(context.Context, *ThinkingNoteModifyReq) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedIThinkingNoteServer) Delete(context.Context, *ThinkingNoteDeleteReq) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIThinkingNoteServer) mustEmbedUnimplementedIThinkingNoteServer() {}

// UnsafeIThinkingNoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IThinkingNoteServer will
// result in compilation errors.
type UnsafeIThinkingNoteServer interface {
	mustEmbedUnimplementedIThinkingNoteServer()
}

func RegisterIThinkingNoteServer(s grpc.ServiceRegistrar, srv IThinkingNoteServer) {
	s.RegisterService(&IThinkingNote_ServiceDesc, srv)
}

func _IThinkingNote_ListByWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThinkingNoteListByWriterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IThinkingNoteServer).ListByWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thinkingNote.IThinkingNote/listByWriter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IThinkingNoteServer).ListByWriter(ctx, req.(*ThinkingNoteListByWriterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IThinkingNote_ListPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThinkingNoteListPublicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IThinkingNoteServer).ListPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thinkingNote.IThinkingNote/listPublic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IThinkingNoteServer).ListPublic(ctx, req.(*ThinkingNoteListPublicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IThinkingNote_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThinkingNoteCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IThinkingNoteServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thinkingNote.IThinkingNote/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IThinkingNoteServer).Create(ctx, req.(*ThinkingNoteCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IThinkingNote_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThinkingNoteModifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IThinkingNoteServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thinkingNote.IThinkingNote/modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IThinkingNoteServer).Modify(ctx, req.(*ThinkingNoteModifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IThinkingNote_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThinkingNoteDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IThinkingNoteServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thinkingNote.IThinkingNote/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IThinkingNoteServer).Delete(ctx, req.(*ThinkingNoteDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IThinkingNote_ServiceDesc is the grpc.ServiceDesc for IThinkingNote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IThinkingNote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thinkingNote.IThinkingNote",
	HandlerType: (*IThinkingNoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listByWriter",
			Handler:    _IThinkingNote_ListByWriter_Handler,
		},
		{
			MethodName: "listPublic",
			Handler:    _IThinkingNote_ListPublic_Handler,
		},
		{
			MethodName: "create",
			Handler:    _IThinkingNote_Create_Handler,
		},
		{
			MethodName: "modify",
			Handler:    _IThinkingNote_Modify_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _IThinkingNote_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thinking_note.proto",
}
