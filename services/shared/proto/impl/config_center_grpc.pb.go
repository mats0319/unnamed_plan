// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc_impl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IConfigCenterClient is the client API for IConfigCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IConfigCenterClient interface {
	GetServiceConfig(ctx context.Context, in *ConfigCenter_GetServiceConfigReq, opts ...grpc.CallOption) (*ConfigCenter_GetServiceConfigRes, error)
}

type iConfigCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewIConfigCenterClient(cc grpc.ClientConnInterface) IConfigCenterClient {
	return &iConfigCenterClient{cc}
}

func (c *iConfigCenterClient) GetServiceConfig(ctx context.Context, in *ConfigCenter_GetServiceConfigReq, opts ...grpc.CallOption) (*ConfigCenter_GetServiceConfigRes, error) {
	out := new(ConfigCenter_GetServiceConfigRes)
	err := c.cc.Invoke(ctx, "/configCenter.IConfigCenter/GetServiceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IConfigCenterServer is the server API for IConfigCenter service.
// All implementations must embed UnimplementedIConfigCenterServer
// for forward compatibility
type IConfigCenterServer interface {
	GetServiceConfig(context.Context, *ConfigCenter_GetServiceConfigReq) (*ConfigCenter_GetServiceConfigRes, error)
	mustEmbedUnimplementedIConfigCenterServer()
}

// UnimplementedIConfigCenterServer must be embedded to have forward compatible implementations.
type UnimplementedIConfigCenterServer struct {
}

func (UnimplementedIConfigCenterServer) GetServiceConfig(context.Context, *ConfigCenter_GetServiceConfigReq) (*ConfigCenter_GetServiceConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceConfig not implemented")
}
func (UnimplementedIConfigCenterServer) mustEmbedUnimplementedIConfigCenterServer() {}

// UnsafeIConfigCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IConfigCenterServer will
// result in compilation errors.
type UnsafeIConfigCenterServer interface {
	mustEmbedUnimplementedIConfigCenterServer()
}

func RegisterIConfigCenterServer(s grpc.ServiceRegistrar, srv IConfigCenterServer) {
	s.RegisterService(&IConfigCenter_ServiceDesc, srv)
}

func _IConfigCenter_GetServiceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigCenter_GetServiceConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IConfigCenterServer).GetServiceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configCenter.IConfigCenter/GetServiceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IConfigCenterServer).GetServiceConfig(ctx, req.(*ConfigCenter_GetServiceConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IConfigCenter_ServiceDesc is the grpc.ServiceDesc for IConfigCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IConfigCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configCenter.IConfigCenter",
	HandlerType: (*IConfigCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceConfig",
			Handler:    _IConfigCenter_GetServiceConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config_center.proto",
}

// IConfigCenterRCClient is the client API for IConfigCenterRC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IConfigCenterRCClient interface {
	SetRCCoreTarget(ctx context.Context, in *ConfigCenterRC_SetRCCoreTargetReq, opts ...grpc.CallOption) (*ConfigCenterRC_SetRCCoreTargetRes, error)
}

type iConfigCenterRCClient struct {
	cc grpc.ClientConnInterface
}

func NewIConfigCenterRCClient(cc grpc.ClientConnInterface) IConfigCenterRCClient {
	return &iConfigCenterRCClient{cc}
}

func (c *iConfigCenterRCClient) SetRCCoreTarget(ctx context.Context, in *ConfigCenterRC_SetRCCoreTargetReq, opts ...grpc.CallOption) (*ConfigCenterRC_SetRCCoreTargetRes, error) {
	out := new(ConfigCenterRC_SetRCCoreTargetRes)
	err := c.cc.Invoke(ctx, "/configCenter.IConfigCenterRC/SetRCCoreTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IConfigCenterRCServer is the server API for IConfigCenterRC service.
// All implementations must embed UnimplementedIConfigCenterRCServer
// for forward compatibility
type IConfigCenterRCServer interface {
	SetRCCoreTarget(context.Context, *ConfigCenterRC_SetRCCoreTargetReq) (*ConfigCenterRC_SetRCCoreTargetRes, error)
	mustEmbedUnimplementedIConfigCenterRCServer()
}

// UnimplementedIConfigCenterRCServer must be embedded to have forward compatible implementations.
type UnimplementedIConfigCenterRCServer struct {
}

func (UnimplementedIConfigCenterRCServer) SetRCCoreTarget(context.Context, *ConfigCenterRC_SetRCCoreTargetReq) (*ConfigCenterRC_SetRCCoreTargetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRCCoreTarget not implemented")
}
func (UnimplementedIConfigCenterRCServer) mustEmbedUnimplementedIConfigCenterRCServer() {}

// UnsafeIConfigCenterRCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IConfigCenterRCServer will
// result in compilation errors.
type UnsafeIConfigCenterRCServer interface {
	mustEmbedUnimplementedIConfigCenterRCServer()
}

func RegisterIConfigCenterRCServer(s grpc.ServiceRegistrar, srv IConfigCenterRCServer) {
	s.RegisterService(&IConfigCenterRC_ServiceDesc, srv)
}

func _IConfigCenterRC_SetRCCoreTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigCenterRC_SetRCCoreTargetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IConfigCenterRCServer).SetRCCoreTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configCenter.IConfigCenterRC/SetRCCoreTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IConfigCenterRCServer).SetRCCoreTarget(ctx, req.(*ConfigCenterRC_SetRCCoreTargetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IConfigCenterRC_ServiceDesc is the grpc.ServiceDesc for IConfigCenterRC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IConfigCenterRC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configCenter.IConfigCenterRC",
	HandlerType: (*IConfigCenterRCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRCCoreTarget",
			Handler:    _IConfigCenterRC_SetRCCoreTarget_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config_center.proto",
}
