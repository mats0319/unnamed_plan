// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc_impl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// INoteClient is the client API for INote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type INoteClient interface {
	ListByWriter(ctx context.Context, in *Note_ListByWriterReq, opts ...grpc.CallOption) (*Note_ListByWriterRes, error)
	ListPublic(ctx context.Context, in *Note_ListPublicReq, opts ...grpc.CallOption) (*Note_ListPublicRes, error)
	Create(ctx context.Context, in *Note_CreateReq, opts ...grpc.CallOption) (*Note_CreateRes, error)
	Modify(ctx context.Context, in *Note_ModifyReq, opts ...grpc.CallOption) (*Note_ModifyRes, error)
	Delete(ctx context.Context, in *Note_DeleteReq, opts ...grpc.CallOption) (*Note_DeleteRes, error)
}

type iNoteClient struct {
	cc grpc.ClientConnInterface
}

func NewINoteClient(cc grpc.ClientConnInterface) INoteClient {
	return &iNoteClient{cc}
}

func (c *iNoteClient) ListByWriter(ctx context.Context, in *Note_ListByWriterReq, opts ...grpc.CallOption) (*Note_ListByWriterRes, error) {
	out := new(Note_ListByWriterRes)
	err := c.cc.Invoke(ctx, "/note.INote/ListByWriter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iNoteClient) ListPublic(ctx context.Context, in *Note_ListPublicReq, opts ...grpc.CallOption) (*Note_ListPublicRes, error) {
	out := new(Note_ListPublicRes)
	err := c.cc.Invoke(ctx, "/note.INote/ListPublic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iNoteClient) Create(ctx context.Context, in *Note_CreateReq, opts ...grpc.CallOption) (*Note_CreateRes, error) {
	out := new(Note_CreateRes)
	err := c.cc.Invoke(ctx, "/note.INote/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iNoteClient) Modify(ctx context.Context, in *Note_ModifyReq, opts ...grpc.CallOption) (*Note_ModifyRes, error) {
	out := new(Note_ModifyRes)
	err := c.cc.Invoke(ctx, "/note.INote/Modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iNoteClient) Delete(ctx context.Context, in *Note_DeleteReq, opts ...grpc.CallOption) (*Note_DeleteRes, error) {
	out := new(Note_DeleteRes)
	err := c.cc.Invoke(ctx, "/note.INote/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// INoteServer is the server API for INote service.
// All implementations must embed UnimplementedINoteServer
// for forward compatibility
type INoteServer interface {
	ListByWriter(context.Context, *Note_ListByWriterReq) (*Note_ListByWriterRes, error)
	ListPublic(context.Context, *Note_ListPublicReq) (*Note_ListPublicRes, error)
	Create(context.Context, *Note_CreateReq) (*Note_CreateRes, error)
	Modify(context.Context, *Note_ModifyReq) (*Note_ModifyRes, error)
	Delete(context.Context, *Note_DeleteReq) (*Note_DeleteRes, error)
	mustEmbedUnimplementedINoteServer()
}

// UnimplementedINoteServer must be embedded to have forward compatible implementations.
type UnimplementedINoteServer struct {
}

func (UnimplementedINoteServer) ListByWriter(context.Context, *Note_ListByWriterReq) (*Note_ListByWriterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByWriter not implemented")
}
func (UnimplementedINoteServer) ListPublic(context.Context, *Note_ListPublicReq) (*Note_ListPublicRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublic not implemented")
}
func (UnimplementedINoteServer) Create(context.Context, *Note_CreateReq) (*Note_CreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedINoteServer) Modify(context.Context, *Note_ModifyReq) (*Note_ModifyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedINoteServer) Delete(context.Context, *Note_DeleteReq) (*Note_DeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedINoteServer) mustEmbedUnimplementedINoteServer() {}

// UnsafeINoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to INoteServer will
// result in compilation errors.
type UnsafeINoteServer interface {
	mustEmbedUnimplementedINoteServer()
}

func RegisterINoteServer(s grpc.ServiceRegistrar, srv INoteServer) {
	s.RegisterService(&INote_ServiceDesc, srv)
}

func _INote_ListByWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note_ListByWriterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(INoteServer).ListByWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.INote/ListByWriter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(INoteServer).ListByWriter(ctx, req.(*Note_ListByWriterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _INote_ListPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note_ListPublicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(INoteServer).ListPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.INote/ListPublic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(INoteServer).ListPublic(ctx, req.(*Note_ListPublicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _INote_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note_CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(INoteServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.INote/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(INoteServer).Create(ctx, req.(*Note_CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _INote_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note_ModifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(INoteServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.INote/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(INoteServer).Modify(ctx, req.(*Note_ModifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _INote_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note_DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(INoteServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.INote/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(INoteServer).Delete(ctx, req.(*Note_DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// INote_ServiceDesc is the grpc.ServiceDesc for INote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var INote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "note.INote",
	HandlerType: (*INoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListByWriter",
			Handler:    _INote_ListByWriter_Handler,
		},
		{
			MethodName: "ListPublic",
			Handler:    _INote_ListPublic_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _INote_Create_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _INote_Modify_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _INote_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "note.proto",
}
