// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc_impl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ICloudFileClient is the client API for ICloudFile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ICloudFileClient interface {
	ListByUploader(ctx context.Context, in *CloudFile_ListByUploaderReq, opts ...grpc.CallOption) (*CloudFile_ListByUploaderRes, error)
	ListPublic(ctx context.Context, in *CloudFile_ListPublicReq, opts ...grpc.CallOption) (*CloudFile_ListPublicRes, error)
	Upload(ctx context.Context, in *CloudFile_UploadReq, opts ...grpc.CallOption) (*CloudFile_UploadRes, error)
	Modify(ctx context.Context, in *CloudFile_ModifyReq, opts ...grpc.CallOption) (*CloudFile_ModifyRes, error)
	Delete(ctx context.Context, in *CloudFile_DeleteReq, opts ...grpc.CallOption) (*CloudFile_DeleteRes, error)
}

type iCloudFileClient struct {
	cc grpc.ClientConnInterface
}

func NewICloudFileClient(cc grpc.ClientConnInterface) ICloudFileClient {
	return &iCloudFileClient{cc}
}

func (c *iCloudFileClient) ListByUploader(ctx context.Context, in *CloudFile_ListByUploaderReq, opts ...grpc.CallOption) (*CloudFile_ListByUploaderRes, error) {
	out := new(CloudFile_ListByUploaderRes)
	err := c.cc.Invoke(ctx, "/cloudFile.ICloudFile/ListByUploader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCloudFileClient) ListPublic(ctx context.Context, in *CloudFile_ListPublicReq, opts ...grpc.CallOption) (*CloudFile_ListPublicRes, error) {
	out := new(CloudFile_ListPublicRes)
	err := c.cc.Invoke(ctx, "/cloudFile.ICloudFile/ListPublic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCloudFileClient) Upload(ctx context.Context, in *CloudFile_UploadReq, opts ...grpc.CallOption) (*CloudFile_UploadRes, error) {
	out := new(CloudFile_UploadRes)
	err := c.cc.Invoke(ctx, "/cloudFile.ICloudFile/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCloudFileClient) Modify(ctx context.Context, in *CloudFile_ModifyReq, opts ...grpc.CallOption) (*CloudFile_ModifyRes, error) {
	out := new(CloudFile_ModifyRes)
	err := c.cc.Invoke(ctx, "/cloudFile.ICloudFile/Modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCloudFileClient) Delete(ctx context.Context, in *CloudFile_DeleteReq, opts ...grpc.CallOption) (*CloudFile_DeleteRes, error) {
	out := new(CloudFile_DeleteRes)
	err := c.cc.Invoke(ctx, "/cloudFile.ICloudFile/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ICloudFileServer is the server API for ICloudFile service.
// All implementations must embed UnimplementedICloudFileServer
// for forward compatibility
type ICloudFileServer interface {
	ListByUploader(context.Context, *CloudFile_ListByUploaderReq) (*CloudFile_ListByUploaderRes, error)
	ListPublic(context.Context, *CloudFile_ListPublicReq) (*CloudFile_ListPublicRes, error)
	Upload(context.Context, *CloudFile_UploadReq) (*CloudFile_UploadRes, error)
	Modify(context.Context, *CloudFile_ModifyReq) (*CloudFile_ModifyRes, error)
	Delete(context.Context, *CloudFile_DeleteReq) (*CloudFile_DeleteRes, error)
	mustEmbedUnimplementedICloudFileServer()
}

// UnimplementedICloudFileServer must be embedded to have forward compatible implementations.
type UnimplementedICloudFileServer struct {
}

func (UnimplementedICloudFileServer) ListByUploader(context.Context, *CloudFile_ListByUploaderReq) (*CloudFile_ListByUploaderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByUploader not implemented")
}
func (UnimplementedICloudFileServer) ListPublic(context.Context, *CloudFile_ListPublicReq) (*CloudFile_ListPublicRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublic not implemented")
}
func (UnimplementedICloudFileServer) Upload(context.Context, *CloudFile_UploadReq) (*CloudFile_UploadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedICloudFileServer) Modify(context.Context, *CloudFile_ModifyReq) (*CloudFile_ModifyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedICloudFileServer) Delete(context.Context, *CloudFile_DeleteReq) (*CloudFile_DeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedICloudFileServer) mustEmbedUnimplementedICloudFileServer() {}

// UnsafeICloudFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ICloudFileServer will
// result in compilation errors.
type UnsafeICloudFileServer interface {
	mustEmbedUnimplementedICloudFileServer()
}

func RegisterICloudFileServer(s grpc.ServiceRegistrar, srv ICloudFileServer) {
	s.RegisterService(&ICloudFile_ServiceDesc, srv)
}

func _ICloudFile_ListByUploader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudFile_ListByUploaderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICloudFileServer).ListByUploader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudFile.ICloudFile/ListByUploader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICloudFileServer).ListByUploader(ctx, req.(*CloudFile_ListByUploaderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICloudFile_ListPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudFile_ListPublicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICloudFileServer).ListPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudFile.ICloudFile/ListPublic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICloudFileServer).ListPublic(ctx, req.(*CloudFile_ListPublicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICloudFile_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudFile_UploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICloudFileServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudFile.ICloudFile/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICloudFileServer).Upload(ctx, req.(*CloudFile_UploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICloudFile_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudFile_ModifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICloudFileServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudFile.ICloudFile/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICloudFileServer).Modify(ctx, req.(*CloudFile_ModifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICloudFile_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudFile_DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICloudFileServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudFile.ICloudFile/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICloudFileServer).Delete(ctx, req.(*CloudFile_DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ICloudFile_ServiceDesc is the grpc.ServiceDesc for ICloudFile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ICloudFile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudFile.ICloudFile",
	HandlerType: (*ICloudFileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListByUploader",
			Handler:    _ICloudFile_ListByUploader_Handler,
		},
		{
			MethodName: "ListPublic",
			Handler:    _ICloudFile_ListPublic_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _ICloudFile_Upload_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _ICloudFile_Modify_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ICloudFile_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud_file.proto",
}
