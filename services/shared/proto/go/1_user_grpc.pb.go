// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc_impl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IUserClient is the client API for IUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IUserClient interface {
	// functions
	Login(ctx context.Context, in *User_LoginReq, opts ...grpc.CallOption) (*User_LoginRes, error)
	List(ctx context.Context, in *User_ListReq, opts ...grpc.CallOption) (*User_ListRes, error)
	Create(ctx context.Context, in *User_CreateReq, opts ...grpc.CallOption) (*User_CreateRes, error)
	Lock(ctx context.Context, in *User_LockReq, opts ...grpc.CallOption) (*User_LockRes, error)
	Unlock(ctx context.Context, in *User_UnlockReq, opts ...grpc.CallOption) (*User_UnlockRes, error)
	ModifyInfo(ctx context.Context, in *User_ModifyInfoReq, opts ...grpc.CallOption) (*User_ModifyInfoRes, error)
	ModifyPermission(ctx context.Context, in *User_ModifyPermissionReq, opts ...grpc.CallOption) (*User_ModifyPermissionRes, error)
	// for other services
	Authenticate(ctx context.Context, in *User_AuthenticateReq, opts ...grpc.CallOption) (*User_AuthenticateRes, error)
}

type iUserClient struct {
	cc grpc.ClientConnInterface
}

func NewIUserClient(cc grpc.ClientConnInterface) IUserClient {
	return &iUserClient{cc}
}

func (c *iUserClient) Login(ctx context.Context, in *User_LoginReq, opts ...grpc.CallOption) (*User_LoginRes, error) {
	out := new(User_LoginRes)
	err := c.cc.Invoke(ctx, "/user.IUser/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserClient) List(ctx context.Context, in *User_ListReq, opts ...grpc.CallOption) (*User_ListRes, error) {
	out := new(User_ListRes)
	err := c.cc.Invoke(ctx, "/user.IUser/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserClient) Create(ctx context.Context, in *User_CreateReq, opts ...grpc.CallOption) (*User_CreateRes, error) {
	out := new(User_CreateRes)
	err := c.cc.Invoke(ctx, "/user.IUser/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserClient) Lock(ctx context.Context, in *User_LockReq, opts ...grpc.CallOption) (*User_LockRes, error) {
	out := new(User_LockRes)
	err := c.cc.Invoke(ctx, "/user.IUser/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserClient) Unlock(ctx context.Context, in *User_UnlockReq, opts ...grpc.CallOption) (*User_UnlockRes, error) {
	out := new(User_UnlockRes)
	err := c.cc.Invoke(ctx, "/user.IUser/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserClient) ModifyInfo(ctx context.Context, in *User_ModifyInfoReq, opts ...grpc.CallOption) (*User_ModifyInfoRes, error) {
	out := new(User_ModifyInfoRes)
	err := c.cc.Invoke(ctx, "/user.IUser/ModifyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserClient) ModifyPermission(ctx context.Context, in *User_ModifyPermissionReq, opts ...grpc.CallOption) (*User_ModifyPermissionRes, error) {
	out := new(User_ModifyPermissionRes)
	err := c.cc.Invoke(ctx, "/user.IUser/ModifyPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserClient) Authenticate(ctx context.Context, in *User_AuthenticateReq, opts ...grpc.CallOption) (*User_AuthenticateRes, error) {
	out := new(User_AuthenticateRes)
	err := c.cc.Invoke(ctx, "/user.IUser/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IUserServer is the server API for IUser service.
// All implementations must embed UnimplementedIUserServer
// for forward compatibility
type IUserServer interface {
	// functions
	Login(context.Context, *User_LoginReq) (*User_LoginRes, error)
	List(context.Context, *User_ListReq) (*User_ListRes, error)
	Create(context.Context, *User_CreateReq) (*User_CreateRes, error)
	Lock(context.Context, *User_LockReq) (*User_LockRes, error)
	Unlock(context.Context, *User_UnlockReq) (*User_UnlockRes, error)
	ModifyInfo(context.Context, *User_ModifyInfoReq) (*User_ModifyInfoRes, error)
	ModifyPermission(context.Context, *User_ModifyPermissionReq) (*User_ModifyPermissionRes, error)
	// for other services
	Authenticate(context.Context, *User_AuthenticateReq) (*User_AuthenticateRes, error)
	mustEmbedUnimplementedIUserServer()
}

// UnimplementedIUserServer must be embedded to have forward compatible implementations.
type UnimplementedIUserServer struct {
}

func (UnimplementedIUserServer) Login(context.Context, *User_LoginReq) (*User_LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedIUserServer) List(context.Context, *User_ListReq) (*User_ListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIUserServer) Create(context.Context, *User_CreateReq) (*User_CreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIUserServer) Lock(context.Context, *User_LockReq) (*User_LockRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedIUserServer) Unlock(context.Context, *User_UnlockReq) (*User_UnlockRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedIUserServer) ModifyInfo(context.Context, *User_ModifyInfoReq) (*User_ModifyInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyInfo not implemented")
}
func (UnimplementedIUserServer) ModifyPermission(context.Context, *User_ModifyPermissionReq) (*User_ModifyPermissionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPermission not implemented")
}
func (UnimplementedIUserServer) Authenticate(context.Context, *User_AuthenticateReq) (*User_AuthenticateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedIUserServer) mustEmbedUnimplementedIUserServer() {}

// UnsafeIUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IUserServer will
// result in compilation errors.
type UnsafeIUserServer interface {
	mustEmbedUnimplementedIUserServer()
}

func RegisterIUserServer(s grpc.ServiceRegistrar, srv IUserServer) {
	s.RegisterService(&IUser_ServiceDesc, srv)
}

func _IUser_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).Login(ctx, req.(*User_LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IUser_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).List(ctx, req.(*User_ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IUser_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).Create(ctx, req.(*User_CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IUser_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_LockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).Lock(ctx, req.(*User_LockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IUser_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_UnlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).Unlock(ctx, req.(*User_UnlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IUser_ModifyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_ModifyInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).ModifyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/ModifyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).ModifyInfo(ctx, req.(*User_ModifyInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IUser_ModifyPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_ModifyPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).ModifyPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/ModifyPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).ModifyPermission(ctx, req.(*User_ModifyPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IUser_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_AuthenticateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IUserServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.IUser/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IUserServer).Authenticate(ctx, req.(*User_AuthenticateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IUser_ServiceDesc is the grpc.ServiceDesc for IUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.IUser",
	HandlerType: (*IUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _IUser_Login_Handler,
		},
		{
			MethodName: "List",
			Handler:    _IUser_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _IUser_Create_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _IUser_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _IUser_Unlock_Handler,
		},
		{
			MethodName: "ModifyInfo",
			Handler:    _IUser_ModifyInfo_Handler,
		},
		{
			MethodName: "ModifyPermission",
			Handler:    _IUser_ModifyPermission_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _IUser_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "1_user.proto",
}
