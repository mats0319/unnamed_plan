// Code generated by MockGen. DO NOT EDIT.
// Source: .\user_grpc.pb.go

// Package mock_rpc_impl is a generated GoMock package.
package mock_rpc_impl

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	impl "github.com/mats9693/unnamed_plan/services/shared/proto/impl"
	grpc "google.golang.org/grpc"
)

// MockIUserClient is a mock of IUserClient interface.
type MockIUserClient struct {
	ctrl     *gomock.Controller
	recorder *MockIUserClientMockRecorder
}

// MockIUserClientMockRecorder is the mock recorder for MockIUserClient.
type MockIUserClientMockRecorder struct {
	mock *MockIUserClient
}

// NewMockIUserClient creates a new mock instance.
func NewMockIUserClient(ctrl *gomock.Controller) *MockIUserClient {
	mock := &MockIUserClient{ctrl: ctrl}
	mock.recorder = &MockIUserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserClient) EXPECT() *MockIUserClientMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockIUserClient) Authenticate(ctx context.Context, in *impl.User_AuthenticateReq, opts ...grpc.CallOption) (*impl.User_AuthenticateRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Authenticate", varargs...)
	ret0, _ := ret[0].(*impl.User_AuthenticateRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockIUserClientMockRecorder) Authenticate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockIUserClient)(nil).Authenticate), varargs...)
}

// Create mocks base method.
func (m *MockIUserClient) Create(ctx context.Context, in *impl.User_CreateReq, opts ...grpc.CallOption) (*impl.User_CreateRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*impl.User_CreateRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserClient)(nil).Create), varargs...)
}

// List mocks base method.
func (m *MockIUserClient) List(ctx context.Context, in *impl.User_ListReq, opts ...grpc.CallOption) (*impl.User_ListRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*impl.User_ListRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIUserClientMockRecorder) List(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIUserClient)(nil).List), varargs...)
}

// Lock mocks base method.
func (m *MockIUserClient) Lock(ctx context.Context, in *impl.User_LockReq, opts ...grpc.CallOption) (*impl.User_LockRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Lock", varargs...)
	ret0, _ := ret[0].(*impl.User_LockRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock.
func (mr *MockIUserClientMockRecorder) Lock(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockIUserClient)(nil).Lock), varargs...)
}

// Login mocks base method.
func (m *MockIUserClient) Login(ctx context.Context, in *impl.User_LoginReq, opts ...grpc.CallOption) (*impl.User_LoginRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*impl.User_LoginRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIUserClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIUserClient)(nil).Login), varargs...)
}

// ModifyInfo mocks base method.
func (m *MockIUserClient) ModifyInfo(ctx context.Context, in *impl.User_ModifyInfoReq, opts ...grpc.CallOption) (*impl.User_ModifyInfoRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyInfo", varargs...)
	ret0, _ := ret[0].(*impl.User_ModifyInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyInfo indicates an expected call of ModifyInfo.
func (mr *MockIUserClientMockRecorder) ModifyInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyInfo", reflect.TypeOf((*MockIUserClient)(nil).ModifyInfo), varargs...)
}

// ModifyPermission mocks base method.
func (m *MockIUserClient) ModifyPermission(ctx context.Context, in *impl.User_ModifyPermissionReq, opts ...grpc.CallOption) (*impl.User_ModifyPermissionRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyPermission", varargs...)
	ret0, _ := ret[0].(*impl.User_ModifyPermissionRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyPermission indicates an expected call of ModifyPermission.
func (mr *MockIUserClientMockRecorder) ModifyPermission(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyPermission", reflect.TypeOf((*MockIUserClient)(nil).ModifyPermission), varargs...)
}

// Unlock mocks base method.
func (m *MockIUserClient) Unlock(ctx context.Context, in *impl.User_UnlockReq, opts ...grpc.CallOption) (*impl.User_UnlockRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unlock", varargs...)
	ret0, _ := ret[0].(*impl.User_UnlockRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlock indicates an expected call of Unlock.
func (mr *MockIUserClientMockRecorder) Unlock(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockIUserClient)(nil).Unlock), varargs...)
}

// MockIUserServer is a mock of IUserServer interface.
type MockIUserServer struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServerMockRecorder
}

// MockIUserServerMockRecorder is the mock recorder for MockIUserServer.
type MockIUserServerMockRecorder struct {
	mock *MockIUserServer
}

// NewMockIUserServer creates a new mock instance.
func NewMockIUserServer(ctrl *gomock.Controller) *MockIUserServer {
	mock := &MockIUserServer{ctrl: ctrl}
	mock.recorder = &MockIUserServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserServer) EXPECT() *MockIUserServerMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockIUserServer) Authenticate(arg0 context.Context, arg1 *impl.User_AuthenticateReq) (*impl.User_AuthenticateRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1)
	ret0, _ := ret[0].(*impl.User_AuthenticateRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockIUserServerMockRecorder) Authenticate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockIUserServer)(nil).Authenticate), arg0, arg1)
}

// Create mocks base method.
func (m *MockIUserServer) Create(arg0 context.Context, arg1 *impl.User_CreateReq) (*impl.User_CreateRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*impl.User_CreateRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserServer)(nil).Create), arg0, arg1)
}

// List mocks base method.
func (m *MockIUserServer) List(arg0 context.Context, arg1 *impl.User_ListReq) (*impl.User_ListRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*impl.User_ListRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIUserServerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIUserServer)(nil).List), arg0, arg1)
}

// Lock mocks base method.
func (m *MockIUserServer) Lock(arg0 context.Context, arg1 *impl.User_LockReq) (*impl.User_LockRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0, arg1)
	ret0, _ := ret[0].(*impl.User_LockRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock.
func (mr *MockIUserServerMockRecorder) Lock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockIUserServer)(nil).Lock), arg0, arg1)
}

// Login mocks base method.
func (m *MockIUserServer) Login(arg0 context.Context, arg1 *impl.User_LoginReq) (*impl.User_LoginRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*impl.User_LoginRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIUserServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIUserServer)(nil).Login), arg0, arg1)
}

// ModifyInfo mocks base method.
func (m *MockIUserServer) ModifyInfo(arg0 context.Context, arg1 *impl.User_ModifyInfoReq) (*impl.User_ModifyInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyInfo", arg0, arg1)
	ret0, _ := ret[0].(*impl.User_ModifyInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyInfo indicates an expected call of ModifyInfo.
func (mr *MockIUserServerMockRecorder) ModifyInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyInfo", reflect.TypeOf((*MockIUserServer)(nil).ModifyInfo), arg0, arg1)
}

// ModifyPermission mocks base method.
func (m *MockIUserServer) ModifyPermission(arg0 context.Context, arg1 *impl.User_ModifyPermissionReq) (*impl.User_ModifyPermissionRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyPermission", arg0, arg1)
	ret0, _ := ret[0].(*impl.User_ModifyPermissionRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyPermission indicates an expected call of ModifyPermission.
func (mr *MockIUserServerMockRecorder) ModifyPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyPermission", reflect.TypeOf((*MockIUserServer)(nil).ModifyPermission), arg0, arg1)
}

// Unlock mocks base method.
func (m *MockIUserServer) Unlock(arg0 context.Context, arg1 *impl.User_UnlockReq) (*impl.User_UnlockRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", arg0, arg1)
	ret0, _ := ret[0].(*impl.User_UnlockRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlock indicates an expected call of Unlock.
func (mr *MockIUserServerMockRecorder) Unlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockIUserServer)(nil).Unlock), arg0, arg1)
}

// mustEmbedUnimplementedIUserServer mocks base method.
func (m *MockIUserServer) mustEmbedUnimplementedIUserServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedIUserServer")
}

// mustEmbedUnimplementedIUserServer indicates an expected call of mustEmbedUnimplementedIUserServer.
func (mr *MockIUserServerMockRecorder) mustEmbedUnimplementedIUserServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedIUserServer", reflect.TypeOf((*MockIUserServer)(nil).mustEmbedUnimplementedIUserServer))
}

// MockUnsafeIUserServer is a mock of UnsafeIUserServer interface.
type MockUnsafeIUserServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeIUserServerMockRecorder
}

// MockUnsafeIUserServerMockRecorder is the mock recorder for MockUnsafeIUserServer.
type MockUnsafeIUserServerMockRecorder struct {
	mock *MockUnsafeIUserServer
}

// NewMockUnsafeIUserServer creates a new mock instance.
func NewMockUnsafeIUserServer(ctrl *gomock.Controller) *MockUnsafeIUserServer {
	mock := &MockUnsafeIUserServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeIUserServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeIUserServer) EXPECT() *MockUnsafeIUserServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedIUserServer mocks base method.
func (m *MockUnsafeIUserServer) mustEmbedUnimplementedIUserServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedIUserServer")
}

// mustEmbedUnimplementedIUserServer indicates an expected call of mustEmbedUnimplementedIUserServer.
func (mr *MockUnsafeIUserServerMockRecorder) mustEmbedUnimplementedIUserServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedIUserServer", reflect.TypeOf((*MockUnsafeIUserServer)(nil).mustEmbedUnimplementedIUserServer))
}
